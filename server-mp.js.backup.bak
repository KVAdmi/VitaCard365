
import express from "express";
import cors from "cors";
import dotenv from "dotenv";
import { MercadoPagoConfig, Preference } from "mercadopago";

// Cargar variables de entorno
dotenv.config();

const app = express();

// CORS universal y simple
app.use(cors({
  origin: '*',
  methods: ['GET', 'POST', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));
app.options('*', cors());

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// ==========================================
// CONFIGURACI√ìN CR√çTICA
// ==========================================
const PORT = process.env.PORT || 3000;  // ‚úÖ Puerto 3000 (coincide con frontend)
const HOST = '0.0.0.0';  // ‚úÖ CR√çTICO: Binding para acceso externo

// ==========================================
// MIDDLEWARE
// ==========================================

// Parseo de JSON y URL encoded
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));



// CORS expl√≠cito para dominios productivos y pruebas locales
const allowedOrigins = [
  'https://vitacard365.com',
  'https://www.vitacard365.com',
  'http://localhost:5174'
];

app.use(cors({
  origin: function (origin, callback) {
    if (!origin) return callback(null, true); // permite curl o peticiones directas
    if (allowedOrigins.includes(origin)) {
      return callback(null, true);
    } else {
  // return callback(new Error('No permitido por CORS'), false); // Deshabilitado por CORS universal
    }
  },
  methods: ['GET', 'POST', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization'],
  credentials: true
}));

// importante: manejar preflight
app.options('*', cors());

// Logging middleware
app.use((req, res, next) => {
  const timestamp = new Date().toISOString();
  console.log(`[${timestamp}] ${req.method} ${req.path} - IP: ${req.ip || 'unknown'}`);
  next();
});

// ==========================================
// INICIALIZACI√ìN MERCADO PAGO
// ==========================================

let mpClient = null;
let mpPreference = null;
let mpConfigured = false;

try {
  const mpToken = process.env.MP_ACCESS_TOKEN;
  
  if (!mpToken) {
    console.error('‚ùå ERROR: MP_ACCESS_TOKEN no est√° configurado en .env');
  } else if (!mpToken.startsWith('TEST-') && !mpToken.startsWith('APP_USR-')) {
    console.error('‚ùå ERROR: MP_ACCESS_TOKEN tiene formato inv√°lido');
  } else {
    console.log('‚úÖ MP TOKEN PREFIX:', mpToken.slice(0, 12) + '...');
    mpClient = new MercadoPagoConfig({ accessToken: mpToken });
    mpPreference = new Preference(mpClient);
    mpConfigured = true;
    console.log('‚úÖ Mercado Pago inicializado correctamente');
  }
} catch (error) {
  console.error('‚ùå Error inicializando Mercado Pago:', error.message);
}

// ==========================================
// RUTAS DE LA API
// ==========================================

// Ruta de salud - CR√çTICA para diagn√≥stico
app.get("/health", (req, res) => {
  try {
    const healthData = {
      status: 'OK',
      timestamp: new Date().toISOString(),
      uptime: Math.floor(process.uptime()),
      memory: {
        used: Math.round(process.memoryUsage().heapUsed / 1024 / 1024) + 'MB',
        total: Math.round(process.memoryUsage().heapTotal / 1024 / 1024) + 'MB'
      },
      server: {
        port: PORT,
        host: HOST,
        node_version: process.version
      },
      mercadopago: {
        configured: mpConfigured,
        client_ready: !!mpClient,
        token_present: !!process.env.MP_ACCESS_TOKEN
      },
      environment: {
        node_env: process.env.NODE_ENV || 'development',
        frontend_url: process.env.FRONTEND_BASE_URL || 'not_configured'
      }
    };
    
    console.log('‚úÖ Health check solicitado - Todo OK');
    res.status(200).json(healthData);
    
  } catch (error) {
    console.error('‚ùå Error en health check:', error);
    res.status(500).json({
      status: 'ERROR',
      message: 'Health check fall√≥',
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// Ruta ra√≠z con informaci√≥n del servidor
app.get("/", (req, res) => {
  try {
    const serverInfo = {
      name: 'VitaCard365 - Servidor Mercado Pago',
      version: '1.0.0',
      status: 'running',
      timestamp: new Date().toISOString(),
      endpoints: {
        health: 'GET /health - Estado del servidor',
        preference: 'POST /api/mercadopago/preference - Crear preferencia de pago',
        webhook: 'POST /api/mercadopago/webhook - Webhook de notificaciones'
      },
      configuration: {
        port: PORT,
        host: HOST,
        cors_enabled: true,
        mercadopago_ready: mpConfigured
      }
    };
    
    res.status(200).json(serverInfo);
    
  } catch (error) {
    console.error('‚ùå Error en ruta ra√≠z:', error);
    res.status(500).json({
      error: 'Error interno del servidor',
      message: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// Crear preferencia de Mercado Pago
app.post("/api/mercadopago/preference", async (req, res) => {
  try {
    console.log('üîÑ Procesando solicitud de preferencia MP...');
    console.log('üì• Datos recibidos:', JSON.stringify(req.body, null, 2));
    
    // Verificar que MP est√© configurado
    if (!mpConfigured || !mpClient || !mpPreference) {
      throw new Error('Mercado Pago no est√° configurado correctamente');
    }
    
    // Extraer y validar datos
    const { plan = 'Individual', frequency = 'Mensual', amount = 199 } = req.body || {};
    
    if (!amount || isNaN(amount) || amount <= 0) {
      throw new Error('El monto debe ser un n√∫mero v√°lido mayor a 0');
    }
    
    // Crear el cuerpo de la preferencia
    const preferenceBody = {
      items: [{
        title: `VitaCard365 - Plan ${String(plan)} ${String(frequency)}`,
        quantity: 1,
        unit_price: Number(amount),
        currency_id: 'MXN',
        description: `Suscripci√≥n ${plan} ${frequency} a VitaCard365 - Plataforma de bienestar integral`
      }],
      back_urls: {
        success: `${process.env.FRONTEND_BASE_URL || 'http://localhost:5174'}/payment/success`,
        failure: `${process.env.FRONTEND_BASE_URL || 'http://localhost:5174'}/payment/failure`,
        pending: `${process.env.FRONTEND_BASE_URL || 'http://localhost:5174'}/payment/pending`,
      },
      auto_return: 'approved',
      notification_url: `http://${HOST}:${PORT}/api/mercadopago/webhook`,
      external_reference: `vitacard365_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      expires: true,
      expiration_date_from: new Date().toISOString(),
      expiration_date_to: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // 24 horas
      statement_descriptor: 'VITACARD365'
    };

    console.log('üì§ Enviando preferencia a Mercado Pago...');
    console.log('üìã Datos de preferencia:', JSON.stringify(preferenceBody, null, 2));
    
    // Crear la preferencia
    const response = await mpPreference.create({ body: preferenceBody });
    const preferenceId = response?.id || response?.body?.id;
    
    if (!preferenceId) {
      throw new Error('No se pudo obtener el ID de preferencia de Mercado Pago');
    }
    
    const result = {
      success: true,
      preferenceId: preferenceId,
      init_point: response.init_point || response.body?.init_point,
      sandbox_init_point: response.sandbox_init_point || response.body?.sandbox_init_point,
      external_reference: preferenceBody.external_reference,
      timestamp: new Date().toISOString()
    };
    
    console.log('‚úÖ Preferencia creada exitosamente:');
    console.log('üÜî ID:', preferenceId);
    console.log('üîó Init Point:', result.init_point);
    
    res.status(200).json(result);
    
  } catch (error) {
    console.error('‚ùå Error creando preferencia MP:', {
      message: error.message,
      status: error.status,
      cause: error.cause,
      stack: error.stack?.split('\n').slice(0, 5).join(' | ')
    });
    
    const statusCode = error.status || 500;
    const errorResponse = {
      success: false,
      error: 'Error al crear preferencia de pago',
      message: error.message,
      details: error.cause || 'Error interno del servidor',
      timestamp: new Date().toISOString()
    };
    
    res.status(statusCode).json(errorResponse);
  }
});

// Webhook de Mercado Pago
app.post("/api/mercadopago/webhook", async (req, res) => {
  try {
    console.log('üì® Webhook de Mercado Pago recibido:');
    console.log('üìã Headers:', JSON.stringify(req.headers, null, 2));
    console.log('üìã Body:', JSON.stringify(req.body, null, 2));
    console.log('üìã Query:', JSON.stringify(req.query, null, 2));
    
    // Aqu√≠ procesar√≠as las notificaciones de pago
    // Por ejemplo: actualizar base de datos, enviar emails, etc.
    
    const webhookResponse = {
      received: true,
      timestamp: new Date().toISOString(),
      data_received: !!req.body,
      processing_status: 'acknowledged'
    };
    
    console.log('‚úÖ Webhook procesado correctamente');
    res.status(200).json(webhookResponse);
    
  } catch (error) {
    console.error('‚ùå Error procesando webhook MP:', error);
    res.status(500).json({
      error: 'Error procesando webhook',
      message: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// ==========================================
// MIDDLEWARE DE MANEJO DE ERRORES
// ==========================================

// Middleware para rutas no encontradas
app.use((req, res) => {
  console.log(`‚ùå Ruta no encontrada: ${req.method} ${req.originalUrl}`);
  res.status(404).json({
    error: 'Ruta no encontrada',
    method: req.method,
    path: req.originalUrl,
    available_endpoints: [
      'GET /',
      'GET /health',
      'POST /api/mercadopago/preference',
      'POST /api/mercadopago/webhook'
    ],
    timestamp: new Date().toISOString()
  });
});

// Middleware de manejo de errores global
app.use((error, req, res, next) => {
  console.error('‚ùå Error no manejado:', {
    message: error.message,
    stack: error.stack,
    url: req.url,
    method: req.method,
    timestamp: new Date().toISOString()
  });
  
  res.status(500).json({
    error: 'Error interno del servidor',
    message: error.message,
    timestamp: new Date().toISOString()
  });
});

// ==========================================
// MANEJO DE SE√ëALES Y CIERRE GRACEFUL
// ==========================================

const gracefulShutdown = (signal) => {
  console.log(`\nüì¥ Se√±al ${signal} recibida - Iniciando cierre graceful...`);
  
  server.close((err) => {
    if (err) {
      console.error('‚ùå Error cerrando servidor:', err);
      process.exit(1);
    }
    
    console.log('‚úÖ Servidor cerrado correctamente');
    process.exit(0);
  });
  
  // Forzar cierre despu√©s de 10 segundos
  setTimeout(() => {
    console.error('‚ö†Ô∏è Timeout alcanzado - Forzando cierre...');
    process.exit(1);
  }, 10000);
};

process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
process.on('SIGINT', () => gracefulShutdown('SIGINT'));

// Manejo de errores no capturados
process.on('uncaughtException', (error) => {
  console.error('‚ùå Excepci√≥n no capturada:', error);
  console.error('Stack:', error.stack);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Promesa rechazada no manejada:', reason);
  console.error('En promesa:', promise);
  process.exit(1);
});

// ==========================================
// INICIAR SERVIDOR
// ==========================================

const server = app.listen(PORT, HOST, () => {
  console.log('\nüöÄ ========================================');
  console.log('üöÄ VITACARD365 - SERVIDOR MERCADO PAGO');
  console.log('üöÄ ========================================');
  console.log(`üìç Host: ${HOST}`);
  console.log(`üîå Puerto: ${PORT}`);
  console.log(`üåê URL Local: http://localhost:${PORT}`);
  console.log(`üåê URL Externa: http://${HOST}:${PORT}`);
  console.log(`‚ù§Ô∏è  Health Check: http://${HOST}:${PORT}/health`);
  console.log(`üí≥ Crear Preferencia: POST http://${HOST}:${PORT}/api/mercadopago/preference`);
  console.log(`üì® Webhook: POST http://${HOST}:${PORT}/api/mercadopago/webhook`);
  console.log(`‚è∞ Iniciado: ${new Date().toISOString()}`);
  console.log(`üîß Node.js: ${process.version}`);
  console.log(`üîß Entorno: ${process.env.NODE_ENV || 'development'}`);
  console.log(`üí∞ Mercado Pago: ${mpConfigured ? '‚úÖ Configurado' : '‚ùå No configurado'}`);
  console.log('üöÄ ========================================\n');
  
  if (!mpConfigured) {
    console.log('‚ö†Ô∏è  ADVERTENCIA: Mercado Pago no est√° configurado correctamente');
    console.log('‚ö†Ô∏è  Verifica tu MP_ACCESS_TOKEN en el archivo .env');
  }
});

// Configurar timeout del servidor
server.timeout = 30000; // 30 segundos
server.keepAliveTimeout = 65000; // 65 segundos
server.headersTimeout = 66000; // 66 segundos

// Exportar para testing
export { app, server };

